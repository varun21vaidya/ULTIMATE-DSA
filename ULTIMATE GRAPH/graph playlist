from collections import deque


class Solution:

    # Function to return Breadth First Traversal of given graph.

    # SC: O(3N) ~ O(N) ie N (at max N nodes we are visiting) + N for visited + N for queue
    # TC: O(N)+ O(2E) = N number of iterations, for each node we are adding it to queue only once
    # + 2E means total number of edges it connected ie all edges, for directed only E
    # ie at each node we are getting summation of its degree ie number of neighbours ie edges which is E.

    def bfsOfGraph(self, V, adj):
        # code here
        bfs = []
        q = deque([0])
        vis = set()
        vis.add(0)

        while q:
            elem = q.popleft()
            bfs.append(elem)

            for item in adj[elem]:
                if item not in vis:
                    vis.add(item)
                    q.append(item)

        return bfs

# --------------------------------------------------------------------------------

    # function to return DFS traversal of graph
    # SC: O(3N) ~ O(N) ie N (at max N nodes we are visiting) + N for visited set + recursion stack space
    # TC: O(N)+ O(2E) = N number of iterations, for each node we are calling recursion only once
    # + 2E means total number of edges it connected ie all edges, for directed only E
    # ie at each node we are getting summation of its degree ie number of neighbours ie edges which is E.

    def dfsOfGraph(self, V, adj):
        # code here
        def solver(elem):
            dfs.append(elem)
            vis.add(elem)
            for item in adj[elem]:
                if item not in vis:
                    solver(item)

            return dfs

        dfs = []
        vis = set()
        return solver(0)

# --------------------------------------------------------------------------------

    # Rotten Tomatoes
    # https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1

    def rottenTomatoes(self, grid):
        # we need to use BFS
        time = 0
        visited = dict()
        q = deque([])
        fresh = 0
        m = len(grid)
        n = len(grid[0])

        for i in range(m):
            for j in range(n):
                if grid[i][j] == 2:
                    q.append([(i, j), time])
                    visited[(i, j)] = 2

                else:
                    visited[(i, j)] = 0

                if grid[i][j] == 1:
                    fresh += 1

        # BFS

        # 0 1 2
        # 0 1 2
        # 2 1 1
        drow = [-1, 0, 1, 0]
        dcol = [0, 1, 0, -1]
        while q:
            [(i, j), t] = q.popleft()
            time = max(time, t)

            for d in range(4):
                row, col = i+drow[d], j+dcol[d]

                if row >= 0 and row < m and col >= 0 and col < n:
                    if grid[row][col] == 1 and visited[(row, col)] == 0:
                        visited[(row, col)] = 2
                        q.append([(row, col), time+1])
                        fresh -= 1

        if fresh > 0:
            return -1
        return time

# --------------------------------------------------------------------------------

    # # Detect A Cycle
    # # Problem Link: https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

    # # BFS: level order traversal
    # # Traverse from different directions and if we reach a node
    # # which is already visited, its a cycle

    def isCycleBFS(self, V, adj):

        # for handling various components, use a function
        # for detecting a component has cycle or not
        # so even if one component has cycle, graph has cycle

        def detectCycle(src):
            q = deque([])
            q.append((src, -1))
            vis.add(src)
            while q:
                elem, source = q.popleft()

                for item in adj[elem]:

                    # move only if item is not source
                    # ie dont return to where you came from
                    if item != source:

                        # if item is in vis, we have already
                        # visited this item by some other direction
                        # ie this is part of cycle, return True
                        if item in vis:
                            return True

                        q.append((item, elem))
                        vis.add(item)
            return False

        # for checking all components we need to traverse through
        # all elements in V range
        vis = set()
        for i in range(V):
            if i not in vis:
                if detectCycle(i):
                    return True
        return False

    # # DFS:
    # # SC: O(N) it stores atmost N nodes with visited set plus recursion stack space
    # # TC: O(N+2E)+ O(N) traverses all nodes and edges and a for loop
    def isCycleDFS(self, V, adj):

        def dfs(elem, src):
            vis.add(elem)
            # traverse thourgh elem adj list
            for item in adj[elem]:
                if item != src:

                    # if item is vis, and its not source,
                    # it must be part of cycle
                    if item in vis:
                        return True

                    else:
                        # if next iteration returns true,
                        # return True for all previous calls
                        if dfs(item, elem):
                            return True
            return False

        # for checking all components we need to traverse through
        # all elements in V range
        vis = set()
        for i in range(V):
            if i not in vis:
                if dfs(i, -1):
                    return True
        return False

# --------------------------------------------------------------------------------

    # Number of Provinces
    # https://practice.geeksforgeeks.org/problems/number-of-provinces/1

    # so we need to traverse through the matrix and find the number of non connected items
    # we will use dfs for this
    def numProvinces(self, adj):

        def dfs(i):
            vis.add(i)

            for x in range(len(adj[i])):
                if x not in vis and adj[i][x] == 1:
                    dfs(x)

        vis = set()
        count = 0  # to count number of non connected provinces
        for i in range(len(adj)):
            if i not in vis:
                dfs(i)
                count += 1

        return count


# --------------------------------------------------------------------------------

    # # Number of Islands:
    # # https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/1

    def numIslands(self, grid):
        def bfs(i, j, vis):
            vis.add((i, j))
            q = deque([])
            q.append((i, j))

            drow = [-1, -1, 0, 1, 1, 1, 0, -1]
            dcol = [0, 1, 1, 1, 0, -1, -1, -1]
            m = len(grid)
            n = len(grid[0])

            while q:
                i, j = q.popleft()  # O(1)

                for d in range(8):
                    row, col = i+drow[d], j+dcol[d]

                    if row >= 0 and row < m and col >= 0 and col < n:
                        if (row, col) not in vis and grid[row][col] == 1:
                            q.append((row, col))
                            vis.add((row, col))

        m = len(grid)
        n = len(grid[0])
        vis = set()  # visited set
        count = 0  # number of islands
        for i in range(m):
            for j in range(n):
                if (i, j) not in vis and grid[i][j] == 1:
                    bfs(i, j, vis)
                    count += 1

        return count

# --------------------------------------------------------------------------------

    # NUMBER OF DISTINCT ISLANDS:
    # https://practice.geeksforgeeks.org/problems/number-of-distinct-islands/1

    def distinctIslands(self, grid):

        def dfs(i, j, temp, basei, basej):

            vis.add((i, j))
            temp.append((basei-i, basej-j))

            drow = [-1, 0, 1, 0]
            dcol = [0, 1, 0, -1]
            m = len(grid)
            n = len(grid[0])

            for d in range(4):
                row, col = i+drow[d], j+dcol[d]

                if row >= 0 and row < m and col < n and col >= 0:
                    if grid[row][col] == 1 and (row, col) not in vis:
                        dfs(row, col, temp, basei, basej)

        vis = set()
        m = len(grid)
        n = len(grid[0])
        count = 0
        distinct = set()

        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1 and (i, j) not in vis:
                    temp = []
                    dfs(i, j, temp, i, j)
                    distinct.add(tuple(temp))
                    count += 1

        return len(distinct)


# --------------------------------------------------------------------------------

    # # Flood Fill Algorithm
    # # https://practice.geeksforgeeks.org/problems/flood-fill-algorithm1856/1

    # TC : N*M || SC: N*M

    def floodFill(self, image, sr, sc, newColor):

        # we will use dfs
        def dfs(i, j, vis, clone, newclr, fillPoint):

            vis.add((i, j))
            clone[i][j] = newclr

            drow = [-1, 0, 1, 0]
            dcol = [0, 1, 0, -1]

            for d in range(4):
                row, col = drow[d]+i, dcol[d]+j

                if row >= 0 and col >= 0 and row < m and col < n and clone[row][col] == fillPoint and (row, col) not in vis:
                    dfs(row, col, vis, clone, newclr, fillPoint)

        def bfs(i, j, vis, clone, newclr, fillPoint):

            vis.add((i, j))
            clone[i][j] = newclr

            drow = [-1, 0, 1, 0]
            dcol = [0, 1, 0, -1]

            q = deque()
            q.append((i, j))

            while q:
                r, c = q.popleft()

                for d in range(4):
                    row, col = drow[d]+r, dcol[d]+c

                    if row >= 0 and row < m and col >= 0 and col < n and clone[row][col] == fillPoint and (row, col) not in vis:
                        q.append((row, col))
                        vis.add((row, col))
                        clone[row][col] = newclr

        # Notice the line that the points that we need to change should be same as starting point
        # ideally we should not change given input, so we use clone
        clone = image[:]
        print("image", image)
        vis = set()
        m, n = len(image), len(image[0])

        # only these values will be changed with newColor
        fillPoint = image[sr][sc]

        # dfs(sr, sc, vis, clone, newColor, fillPoint)
        bfs(sr, sc, vis, clone, newColor, fillPoint)

        print("clone")
        return clone

    # # distance of nearest cell from 0 / 0-1 Matrix:
    # # https://leetcode.com/problems/01-matrix/

    # we will solve this using bfs as it represents at each step we move distance 1

    # 3 things needed, clone array for output distance, vis set to track , queue for bfs

    # Initially we will find 0s we will add it to que so all that all 0s would be added to q
    # now we will traverse in bfs for each one at a step, so for each step,
    # if there is 1 occured its distance would be added. and we store this distance
    # in the que itself, to track previous distances and append to it. as we are moving stepwise with each element
    # the distance would be shortest only.

    def ZeroOneMatrix(self, mat):
        m = len(mat)
        n = len(mat[0])

        clone = [[float('inf')]*n for x in range(m)]
        vis = set()
        q = deque()

        for i in range(m):
            for j in range(n):
                if mat[i][j] == 0:
                    vis.add((i, j))
                    q.append((i, j, 0))

        drow = [-1, 0, 1, 0]
        dcol = [0, 1, 0, -1]
        while q:
            r, c, dist = q.popleft()
            clone[r][c] = dist

            for d in range(4):
                row, col = drow[d]+r, dcol[d]+c

                if row >= 0 and row < m and col >= 0 and col < n:
                    if (row, col) not in vis and mat[row][col] == 1:
                        q.append((row, col, dist+1))
                        vis.add((row, col))
                        clone[row][col] = dist+1

        return clone

    # # Replace O's with X's
    # # https://practice.geeksforgeeks.org/problems/replace-os-with-xs0052/1

    # now first we need to understand the problem, which states that we need to find
    # the "O"s which are fully surrounded by "X" now it also means we need to skip
    # those "O"s which are on boundry, so from our Jugaad we will find Ulta Solution
    # we will find the "O"s on the boundry store them in visited and then convert those
    # "O"s which are not in visited set.

    def fillOwithX(self, mat):
        drow = [-1, 0, 1, 0]
        dcol = [0, 1, 0, -1]
        m = len(mat)
        n = len(mat[0])
        vis = set()

        # dfs which traverses from boundry and marks those Os which are adjecent to boundry
        # ie these are not eligible to converted
        def dfs(r, c, vis):
            vis.add((r, c))
            for d in range(4):
                row, col = drow[d]+i, dcol[d]+j

                if row >= 0 and row < m and col >= 0 and col < n and (row, col) not in vis and mat[row][col] == "O":
                    dfs(row, col, vis)

        # traveres throgh matrix but only fetch boundry elements and finds "O"s on boundry and uses dfs on them
        for i in range(m):
            for j in range(n):
                # only traverse through boundry and find the "O"s
                if i == 0 or i == m-1 or j == 0 or j == n-1:
                    if mat[i][j] == "O":
                        dfs(i, j, vis)

        # when we got all non eligible marked with vis set, again traverse and convert those Os which are not in vis
        for i in range(m):
            for j in range(n):
                if mat[i][j] == "O" and (i, j) not in vis:
                    mat[i][j] = "X"

        return mat

    # # Bipertite Graph:
    # # https://practice.geeksforgeeks.org/problems/bipartite-graph/1

    # Bipertite graph is a graph with 2 colors such that no two adjecent nodes have same color

    def bipertite(self, V, adj):

        def bfs(start):

            q = deque()
            q.append(start)

            while q:
                node = q.popleft()

                for item in adj[node]:

                    if color[item] == -1:
                        color[item] = not color[node]
                        q.append(item)

                    elif color[item] == color[node]:
                        return False

            return True

        def dfs(node, clr):
            color[node] = clr

            for item in adj[node]:
                if color[item] == -1:
                    if not dfs(item, not clr):
                        return False

                elif color[item] == color[node]:
                    return False

            return True

        # define a color array to maintain the track of colors of each node
        # if two adjecent nodes have same color return False
        color = [-1]*V

        # to handle multiple components we use a for loop and traversal.
        # if any node has -1 its not traversed yet so run traversal through it.

        for i in range(V):
            if color[i] == -1:
                # if not bfs(i): return False
                if not dfs(i, 0):
                    return False

        return True

    # # Dectect a Cycle for Directed Graph
    # # https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

        # to find if graph has cycle or not for undirected we have used to just check if it was visited or not
        # but for directed we also need to check if its on the same path or not as for directed path changes by direction of nodes
        # so make a marking system for just visited but not on same path and on same path
        # so in visited array create
        # for visited but not on same path = 1
        # for visited and on same path = 2

        # Initially when we are traversing and found a node we will mark it as 2 as we are continuing on same path
        # but when we got out of that path ie no node to move forward we return, so while returning we will leave that path, so convert it to 1
        # now when we came across a that node with value 1 from another direction, we can say as it was another direction because we were not on
        # same path as its 1 , so its not a cycle
        # but if that node had value as 2 we would be on same path so its a cycle

    def detectCycleDirected(self, V, adj):

        def dfs(node):
            vis[node] = 2

            for item in adj[node]:

                # if new item is occured traverse again, and when completed check if its True, and return True
                if vis[item] == 0:
                    if dfs(item):
                        return True

                # if item is on same path: return True its a cycle
                if vis[item] == 2:
                    return True

                # if vis[item] is 1 it will not be a cycle and anyway we are returning False at the end

            # when loop completes node backtracks so it leaves current path, so convert it to 1
            vis[node] = 1
            return False

        vis = [0]*V
        for i in range(V):

            if vis[i] == 0:
                # if cycle detected quickly return True
                if dfs(i):
                    return True

        return False

    # --------------------------------------

        # #  BFS METHOD: KAHN's Algorithm

        # we know that kahn's algo is based for Topological sort
        # so its only for DAG: directed acyclic graph
        # if we apply it on cyclic graph, it wouldnot complete it
        # so just perform it and check if its length is same as V, then its not cycle
        # if its length is not equal to V then its a cycle

    def detectCycleDirectedBFS(self, V, adj):

        indegree = [0]*V

        # populate the indegree array
        for v in range(V):
            for item in adj[v]:
                indegree[item] += 1

        q = deque()
        topoCount = 0

        for v in range(V):
            if indegree[v] == 0:
                q.append(v)
                topoCount += 1

        while q:
            node = q.popleft()
            for item in adj[node]:
                indegree[item] -= 1
                if indegree[item] == 0:
                    q.append(item)
                    topoCount += 1

        return topoCount != V

    # ---------------------------------------------

    # # Topological Sort:

    # # https://practice.geeksforgeeks.org/problems/topological-sort/1

    # # What is topological Sort:
    # # Its a linear ordering of vertices such that if there is link between u and v, u will appear first before v
    # # eg. take this adjecent matrix
    # # 0 []
    # # 1 []
    # # 2 [3]
    # # 3 [1]
    # # 4 [0,1]
    # # 5 [0 2]
    # # then 5 is directed towards 0 and 2 so it will appear before 0 and 2 in sorted order likewise 4 before 0,1
    # # 3 before 1, 2 before 3
    # # so it will be -->   5 4 2 3 1 0     or    4 5 2 3 1 0

    # # ITS ONLY APPLICABLE FOR DAG--> Directed Acyclic Graph

    # # APPRAOACH:
    # # we will traverse each vertices as nodes, now each node will traverse in its neighbours, now when it completes
    # # that node will be added to stack
    # # for eg. 2 will have neighbour 3 so dfs(3) will be called and 1 will already be visited, so now loop of 3 will be completed of all neighbours
    # # and then it will be added to stack then neighbour loop of 2 will be completed and it will be added to stack.

    def TopologicalSort(self, V, adj):
        def dfs(node, vis, stack):
            vis.add(node)

            for item in adj[node]:
                if item not in vis:
                    dfs(item, vis, stack)

            stack.append(node)

        vis = set()
        stack = []

        for i in range(V):
            if i not in vis:
                dfs(i, vis, stack)

        res = []
        for i in range(V):
            res.append(stack.pop())

        return res

    # -----------------------------------------------------------------------

    # # KAHN's Algorithm (TOPOLOGICAL SORT BFS)

    # Approach:
    # bfs means a queue is necessary. Now to get the topological sort with BFS we need an Indegrees Array.
    # Indegree of vertices means the number of inward/incoming directions of that vertices.

    # Now how it works:
    # First calculate the number of each incoming vertices and store them in array
    # now take only zero indegree vertices and add them to queue, and also to result.

    # Now perform a BFS traversal with popping each vertices from queue and then traverse through all of its neighbours
    # now when we visit each neighbour, its indegree will be reduced as indication that we have visited this item.
    # now when its indegree will become zero, add it to queue and result

    # The resultant array would be in topological sort.

    def topoLogicalSortBFS(self, V, adj):

        # first create indegree array
        indegree = [0]*V

        for v in range(V):
            for item in adj[v]:
                indegree[item] += 1

        # create queue and resultant array
        q = deque()
        res = []

        # first we need to add zero based indegree vertices to queue and result
        for v in range(V):
            if indegree[v] == 0:
                q.append(v)
                res.append(v)

        while q:
            node = q.popleft()

            for item in adj[node]:
                indegree[item] -= 1
                if indegree[item] == 0:
                    q.append(item)
                    res.append(item)

        return res


# ---------------------------------------------------------------------------------------------------------

    # # Eventual Safe States

    # # https://practice.geeksforgeeks.org/problems/eventual-safe-states/1

    # so first of all we need to find terminal nodes ie nodes which does not have outer direction
    # and for every else element when all or only path from this element to terminal node is there, this element is safe node
    # we need to find all such safe node, NOTE: a terminal node is also a safe node
    # now if there is a cycle in graph there is another route which offcourse cannot reach terminal node, so we need to
    # eliminate those nodes which are in cycle and supporting this cycle
    # now how to detect cycle we know we can store a visited array which indicates if node is visited or not and if visited
    # it is in same path or different path if same path its part of cycle.
    # vis states:
    # 0 : unvisited
    # 1 : visited but different path
    # 2 : visited and same path

    # at the end all eleements in cycle would have been marked as 2 and rest with 1 and we can return those as safe nodes

    # Note : gives TLE, for last 3 cases. USE BFS

    def safeStatesDFS(self, V, adj):

        def dfsCycle(node):
            vis[node] = 2  # we are continuing same path

            for item in adj[node]:

                # if item is unvisited, traverse dfs and check if its cycle by checking if it returns true
                if vis[item] == 0:
                    if dfsCycle(item):
                        return True

                # if vis[item] is 2 ie its on same path as node then both are in cycle
                if vis[item] == 2:
                    return True

            # rest that reach here are not part of cycle
            vis[node] = 1
            return False

        vis = [0]*V
        safenodes = []

        for i in range(V):
            if vis[i] == 0:
                dfsCycle(i)
        print(vis)
        for i in range(V):
            if vis[i] == 1:
                safenodes.append(i)

        return safenodes

    # # BFS
    # SO for BFS, we can see we have terminal nodes with no outer edge, and also there might be isCycleBFS
    # now if we try to use Kahns algorithm on this, we might include those vertices as indegree that support cycle as safe nodes
    # as they have only outer nodes, but they are not as they are attached to cycle.
    # So we will reverse direction of all edges so terminal nodes with all incoming nodes will become all outgoing nodes
    # ie will become vertices with indegree = 0, and we can use Kahns algo here as it will remove those vertices supporting the cycle

    def safeStatesBFS(self, V, adj):

        revadj = [[]for _ in range(V)]
        indegree = [0]*V
        for v in range(V):
            for item in adj[v]:
                revadj[item].append(v)
                indegree[v] += 1

        q = deque()
        res = []
        for v in range(V):
            if indegree[v] == 0:
                q.append(v)

        while q:
            node = q.popleft()
            res.append(node)

            for item in revadj[node]:
                indegree[item] -= 1
                if indegree[item] == 0:
                    q.append(item)

        res.sort()
        return res

# # -------------------------------------------------------------------------------------------------

#     Alien Dictionary
#     https://practice.geeksforgeeks.org/problems/alien-dictionary/1

    def AlienDictionary(self,N,K,alien_dict):

        # if you observe that we have to decode the alien dictionary
        # by comparing with our letters, first K letters of our alphabetes are to be used
        # now when you observe [baa, abcd, abca ] you can tell that b should be before a , d before a like this pairs
        # so it seems familiar with topological sort and these pairs are indexes and K letters are vertices
        # So first create a string of our own alphabets
        # then we will create a hashmap with K letters and their index, which will be easy to operate graph


        # now if its topological sort, we will need to create an adjecent list
        # so we will traverse in this alien dictionary and compare the words
        # now when the word letters are not same then first word letter will have higher priority in sort
        # eg for abcd and abca, d and a are diff but abcd is earlier in list so d-->a like this create adj list
        # then you can use dfs or bfs.

        alphabets="abcdefghijklmnopqrstuvwxyz"
        hashmap=dict()
        adj=[[]for _ in range(K)]

        for i in range(K):
            hashmap[alphabets[i]]=i
        
        # print(hashmap)
        
        for word in range(1,N):
            letter, maxlen= 0, min(len(alien_dict[word-1]),len(alien_dict[word]))

            while letter<maxlen:
                if alien_dict[word-1][letter]!=alien_dict[word][letter]:
                    adj[hashmap[alien_dict[word-1][letter]]].append(hashmap[alien_dict[word][letter]])
                    break
                letter+=1
        
        # print(adj)

        bfs=[] # list to store the topological sort of indexs
        q=deque()

        indegree=[0]*K
        
        # populate the indegree
        for v in range(K):
            for item in adj[v]:
                indegree[item]+=1
        
        # get zero indegree nodes
        for v in range(K):
            if indegree[v]==0:
                q.append(v)
        
        # start bfs loop
        while q:
            node = q.popleft()
            bfs.append(node)
            for item in adj[node]:
                indegree[item]-=1

                if indegree[item]==0:
                    q.append(item)

        # print(bfs)

        # convert the index into letters again
        res=[]
        for i in range(K):
            res.append(alphabets[bfs[i]])

        return res


    # Shortest Path for Directed Acyclic Graph:
    # https://practice.geeksforgeeks.org/problems/shortest-path-in-undirected-graph/1

    def shortestPathDAG(self,n,m,edges):

        # now if the graph is acyclic graph, to calculate shortest distance
        # we will use TOPO Sort and after getting stack as in case of dfs, 
        # we will traverse and get minimum value for each item
        # ie compare existing dis value and value at current node + current wt
        # return the array with each item having shortest distance, 
        # if some item is non-rechable use -1

        # first convert edges into adjecent list

        adj=[[] for _ in range(n)]
        for v,item, wt in edges:
            adj[v].append([item,wt])

        # now calculate the topo sort
        def dfs(node):
            vis.add(node)
            for item in adj[node]:
                it = item[0]
                if it not in vis:
                    dfs(it)
            
            stack.append(node)

        vis=set()
        stack=[]
        for i in range(n):
            if i not in vis:
                dfs(i)


        distArr=[float('inf')]*n

        # distance from source to source is obviously zero
        distArr[0]=0

        while stack:
            node=stack.pop()

            for it,wt in adj[node]:
                if distArr[it]>distArr[node]+wt:
                    distArr[it]=distArr[node]+wt

        

        # if there are still dist unreachable ie infinity reset them to -1
        for i in range(n):
            if distArr[i]==float('inf'):
                distArr[i]=-1
        
        return distArr






V = 5
adj = [[1, 2, 3], [], [4], [], []]


ans = Solution()


# for BFS TRAVERSAL
# print(ans.bfsOfGraph(V, adj))  # [0, 1, 2, 3, 4]
# print(ans.dfsOfGraph(V, adj))  # [0, 1, 2, 4, 3]
# print(ans.rottenTomatoes([[2, 2, 0, 1]]))
# print(ans.rottenTomatoes([[0, 1, 2], [0, 1, 2], [2, 1, 1]]))
# print(ans.isCycleBFS(V,adj))
# print(ans.numProvinces([[1, 0, 1], [0, 1, 0], [1, 0, 1]]))
# print(ans.distinctIslands(
#     [[1, 1, 0, 1, 1], [1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [1, 1, 0, 1, 1]]))
# print(ans.floodFill([[1, 1, 1], [1, 1, 0], [1, 0, 1]], 1, 1, 2))
# print(ans.ZeroOneMatrix([[0, 0, 0], [0, 1, 0], [1, 1, 1]]))
# print(ans.fillOwithX(mat=[["X", "X", "X", "X"], [
#       "X", "O", "X", "X"],["X", "O", "O", "X"], [
#       "X", "O", "X", "X"], [ "X", "X", "O", "O"]]))


# print(ans.bipertite(4, [[2, 3], [3], [0, 3], [0, 1]]))  # False
# print(ans.detectCycleDirected(4,
#                               [[0, 1],
#                                [1, 2],
#                                   [2, 3],
#                                   [3, 0], ]))  # True

# print(ans.detectCycleDirectedBFS(4,
#                               [[0, 1],
#                                [1, 2],
#                                   [2, 3],
#                                   [3, 0], ]))  # True

# print(ans.safeStates(4,[[0, 1],[1, 2],[2, 0],[2,3],[3, 3]]))
# print(ans.TopologicalSort(V, adj))
# print(ans.topoLogicalSortBFS(V, adj))
# print(ans.AlienDictionary(5,4 ,["baa","abcd","abca","cab","cad"]))
print(ans.shortestPathDAG(6,7,[[0,1,2],[0,4,1],[4,5,4]
,[4,2,2],[1,2,3],[2,3,6],[5,3,1]]))